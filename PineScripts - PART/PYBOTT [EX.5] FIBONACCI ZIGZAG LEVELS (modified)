// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ¬© LonesomeTheBlue
// Modified By Pybott For Education purpose

//@version=4

// A. Create User Input
study("PYBOTT [EX.5] FIBONACCI ZIGZAG LEVELS (modified)", overlay = true, max_bars_back = 500, max_lines_count = 300)
prd = input(defval = 15, title="ZigZag Period", minval = 2, maxval = 50)
showzigzag = input(defval = true, title = "Show Zig Zag")
showfibo = input(defval = true, title = "Show Fibonacci Ratios")
labelcol = input(defval = color.orange, title = "Text Color")
fibolinecol = input(defval = color.gray, title = "Line Color")
upcol = input(defval = color.lime, title = "Zigzag Up Color")
dncol = input(defval = color.red, title = "Zigzag Down Color")
labelloc = input(defval = "Left", title = "Label Location", options = ["Left", "Right"])
enable236 = input(defval = true, title = "Enable Level 0.236")
enable382 = input(defval = true, title = "Enable Level 0.382")
enable500 = input(defval = true, title = "Enable Level 0.500")
enable618 = input(defval = true, title = "Enable Level 0.618")
enable786 = input(defval = true, title = "Enable Level 0.786")

// B.Create Array To Store Each Fibonacci Ratios
var fibo_ratios = array.new_float(0)
var shownlevels = 1
if barstate.isfirst
    array.push(fibo_ratios, 0.000)
    if enable236
        array.push(fibo_ratios, 0.236)
        shownlevels := shownlevels + 1
    if enable382
        array.push(fibo_ratios, 0.382)
        shownlevels := shownlevels + 1
    if enable500
        array.push(fibo_ratios, 0.500)
        shownlevels := shownlevels + 1
    if enable618
        array.push(fibo_ratios, 0.618)
        shownlevels := shownlevels + 1
    if enable786
        array.push(fibo_ratios, 0.786)
        shownlevels := shownlevels + 1
    for x = 1 to 5
        array.push(fibo_ratios, x)
        array.push(fibo_ratios, x + 0.272)
        array.push(fibo_ratios, x + 0.414)
        array.push(fibo_ratios, x + 0.618)


// C. Define Varaible to Get Bar index @ High and Low and Store To ZigZag Array
float ph = highestbars(high, prd) == 0 ? high : na
float pl = lowestbars(low, prd) == 0 ? low : na
var dir = 0
dir := iff(ph and na(pl), 1, iff(pl and na(ph), -1, dir))
var max_array_size = 10
var zigzag = array.new_float(0)

// D. Create Function To Update Zigzag Or Add Zigzag Lines
add_to_zigzag(value, bindex)=>
    array.unshift(zigzag, bindex)
    array.unshift(zigzag, value)
    if array.size(zigzag) > max_array_size
        array.pop(zigzag)
        array.pop(zigzag)
    
update_zigzag(value, bindex)=>
    if array.size(zigzag) == 0
        add_to_zigzag(value, bindex)
    else
        if (dir == 1 and value > array.get(zigzag, 0)) or (dir == -1 and value < array.get(zigzag, 0))
            array.set(zigzag, 0, value)
            array.set(zigzag, 1, bindex)
        0.
Round_it(value)=> round(value / syminfo.mintick) * syminfo.mintick


// E. Detecting Direction Changes ( up = 1 , down = -1) Then add new zigzag value to array
dirchanged = change(dir)
if ph or pl
    if dirchanged
        add_to_zigzag(dir == 1 ? ph : pl, bar_index)
    else
        update_zigzag(dir == 1 ? ph : pl, bar_index)

// F. Create zigzag Line Case Coordinate PointChange Or Direction Change
// modified by PYBOTT

if showzigzag and array.size(zigzag) >= 4
    var line zzline = na
    float val = array.get(zigzag, 0)
    int point = round(array.get(zigzag, 1))
    if change(val) or change(point)
        float val1 = array.get(zigzag, 2)
        int point1 = round(array.get(zigzag, 3))
        if change(val1) == 0 and change(point1) == 0
            line.delete(zzline)
        zzline := line.new(x1 = point, y1 = val, x2 = point1, y2 = val1, color = dir == 1 ? upcol : dncol, width = 2)


// G. Create Fibo Levels Line and Attach Labels @ Locations
maxprice = 0.0
var fibolines = array.new_line(0)
var fibolabels = array.new_label(0)
if showfibo and array.size(zigzag) >= 6 and barstate.islast
    if array.size(fibolines) > 0
        for x = 0 to array.size(fibolines) - 1
            line.delete(array.get(fibolines, x))
            label.delete(array.get(fibolabels, x))
            
    diff = array.get(zigzag, 4) - array.get(zigzag, 2)
    stopit = false
    for x = 0 to array.size(fibo_ratios) - 1
        if stopit and x > shownlevels
            break
        array.unshift(fibolines, 
                      line.new(x1 = round(array.get(zigzag, 5)), 
                               y1 = array.get(zigzag, 2) + diff * array.get(fibo_ratios, x), 
                               x2 = bar_index, 
                               y2 = array.get(zigzag, 2) + diff * array.get(fibo_ratios, x), 
                               color = fibolinecol,
                               style = line.style_dotted,
                               extend = extend.right))
        label_x_loc = labelloc == "Left" ? time[bar_index - (round(array.get(zigzag, 5)) - 3)] : time + 15 * (time - time[1])
        array.unshift(fibolabels, 
                      label.new( x = label_x_loc, 
                                 y = array.get(zigzag, 2) + diff * array.get(fibo_ratios, x), 
                                 text = tostring(array.get(fibo_ratios, x), '#.###') + "(" + tostring(Round_it(array.get(zigzag, 2) + diff * array.get(fibo_ratios, x))) + ")", 
                                 xloc = xloc.bar_time,
                                 textcolor = labelcol, 
                                 style =  label.style_none))
        if (dir == 1 and array.get(zigzag, 2) + diff * array.get(fibo_ratios, x) > array.get(zigzag, 0)) or
           (dir == -1 and array.get(zigzag, 2) + diff * array.get(fibo_ratios, x) < array.get(zigzag, 0))
            stopit := true
        
// H. Create Alert Conditions ( Anyalert At each price Level)
// PYBOTT modified Create Alert Condition
// check trend up dir = 1 , down dir = -1
        
        if dir == 1 
            if close < array.get(zigzag, 2) + diff * array.get(fibo_ratios, x)
                alert( message = "Currently in UPTREND \n Next Target is " + tostring(array.get(zigzag, 2) + diff * array.get(fibo_ratios, x)) )
        
        if dir == -1
            if close > array.get(zigzag, 2) + diff * array.get(fibo_ratios, x)
                alert( message = "Currently in DOWNTREND \n Next Target is " + tostring(array.get(zigzag, 2) + diff * array.get(fibo_ratios, x)) )
        
    // PYBOTT modified Create Label Dash Board
    current_reach_price = array.get(zigzag, 2) + diff * array.get(fibo_ratios, 0)
    target_reach_price = 0
    string must_break = "0"
    string content = "============================\n PYBOTT - FIBONACCI RETRACMENT \n============================\n"
    content := content + "CURRENT IN : " +  (dir == 1 ? "UP-TREND üìà " : dir == -1 ? "DOWN-TREND üìâ " : "CALIBRATE \n\n?????" )
    for x = 0 to array.size(fibo_ratios) - 1
        if must_break == "1"
            break
        if dir == 1 
            maxprice := high > maxprice ? maxprice : high
            current_reach_price := maxprice < array.get(zigzag, 2) + diff * array.get(fibo_ratios, x) ? array.get(zigzag, 2) + diff * array.get(fibo_ratios, x) : na
            if maxprice > array.get(zigzag, 2) + diff * array.get(fibo_ratios, x)
                content := content + "\n" + tostring(array.get(fibo_ratios, x)) + " : ‚úîÔ∏è" +  tostring( array.get(zigzag, 2) + diff * array.get(fibo_ratios, x) )

            else 
                content := content + "\n\n====: NEXT TARGET :=====\n\n" +  tostring( array.get(zigzag, 2) + diff * array.get(fibo_ratios, x) )
                must_break := "1"
                
        if dir == -1 
            maxprice := low < maxprice ? maxprice : low
            current_reach_price := maxprice > array.get(zigzag, 2) + diff * array.get(fibo_ratios, x) ? array.get(zigzag, 2) + diff * array.get(fibo_ratios, x) : na
            if maxprice < array.get(zigzag, 2) + diff * array.get(fibo_ratios, x)
                content := content + "\n" + tostring(array.get(fibo_ratios, x)) + " : ‚úîÔ∏è" +tostring( array.get(zigzag, 2) + diff * array.get(fibo_ratios, x) )
            else 
                content := content + "\n\n====: NEXT TARGET :=====\n\n" +  tostring( array.get(zigzag, 2) + diff * array.get(fibo_ratios, x) )
                must_break := "1"

                
    int offset = input( defval = 1 , title="Dashboard Offset" , group = "Dashboard Setting")
    var label dashbaord = na
    label.delete(dashbaord)
    dashbaord := label.new(x=time + offset * (time - time[1]) , y=high , xloc=xloc.bar_time , style= dir == -1 ? label.style_label_lower_left : label.style_label_upper_left , yloc = yloc.price , color=color.silver , size = size.small , text = content + "\n\n===: CURRENT REACH :===\n\n" + tostring(maxprice) )
    
plotchar(dir,"dir")
// plot(ph,"ph")
// plot(pl,"pl")





    